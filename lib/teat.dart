void main(){

  //1 toStringAsFixed 소수 점를 () 자릿수 지정해 문자열로 바꿔주는 함수 원

  //2 valuesList Map  값를 리스트 로 iterable<list> 임시 저장한다

  //3 iterable 반복문에 담고 있는 리스트는 아님 수정 하거나 저장할수 없음

  //4 removewhere 조건에 맞다면 제거 한다 where 조건에 맞다면 iterable 로 반환 한다

  //5 isEven is Odd 정수 만 가능하며 맞다면 bool타입  true  반환 한다

  //6 elemenAt 특정 인덱스에 가져온다 iterable 에서도 사용가능하나 불안정하다

  //7 dynamic 어떤 타입이든 그떄 그때 담을수있음 var 한번 담으면 고정

  //8 abs()  -음수인 숫자를 양수로 반환하고 양수는 그대로 이다

  //9 MapEntry Map 의 key , value 를 하나의 객체를 iterable로 다룰수있게 나타냈나

  // git 강의

  //협업이 필요한 이유
  // 코드 충돌 방지
  //변경이력 추척 및 롤백가능
  //동시 다발적 작업
  //코드 리뷰를 통한 품질 관리

git 에 init 초기 값

  status
현재 깃 상태 확인

  add
스테이징 영역에 우가 / 커밋 전 필수 단계 / . 은 모든 파일을 의미

  commit

  스테이징된 변경사항을 저장소에 기록
  m 옵션으로 커밋 메세지 작성
  의미 있는 커밋 메시지 를 작성하는 것이 중요

  // 기본 셋팅 끝

  log
  커밋 이력 확인

  깃허브  2.2 저장

  clone
  원격으로 저장소 로컬 복사

  push
  저장소 에 업로드 한다
    origin 저장소의 기본이름값

  //가져온다
  pull

  fetch + mwege 한번에 수행 한다

  fetch
  로컬에 영향 받지 않고 확인하는 방법

  브랭치 관리
독립적인 작업 공간
  여러 기능을 동시에 개발할때 사용
  main 브랜치 는 항상 배포 가능한 안정적인 상태

  checkout
  1// 참고 자주 생성 이동
  2 이동 만

  네이밍 컨벤션
  1 사용하는걸 볼수있게
  2 버그를 알수 있게
  3긴급하게 수정할때
  4 버전 에 따라 배포 예정

  협업 플로우
  pull Requeest(PR)
  팀원 에게 검토 요청
  병합하기 전 필수 과정

  3 2 흐름 예정
  1원격 저장소 메인 브렌치 에서
  2 생성,이동
  3아디 를 등록한다
  4 메인 이 아닌 푸쉬로 간다
  7 병합할지 코드를 검토 한다
  8푸쉬에 저장한다
  9 메인 브랜치로 업데이트 한다

  3 3 주의사항
  git pull 해야 충돌 최소화

  의미 있는 커밋 메시지
  무엇을 변경했는지 명확히
  브랜치에 직접 커밋 금지
  gitgnore
  실행하면 자동생성 되는폴더 으로 /변경사항들이 안나올때  /build /dart.tool 빈 파일 들 안보이게 숨긴다
  자동으로 휴지통 처럼 만들어져있다

  1 프로젝트 생성 업로드
  프로젝트 만들고 업로드 하기
  1단게
  원하는 작업 폴더를 만들고 이름 을 정확하게 쓴다

  2단계
  리포지토리 초기화 를 누른다 / 터미널 에서 init 이랑 동일하다
  깃르로 변경 된다
  4번계
  커밋을 add +
  5단계
  깃 push 하고 를 하면 업로드 가 끝난다

  6단계
  깃 허브 에 들어가서 로그인 하고
  설정 셋팅지에 들어가서
  에드 피플 에 들어가서 검색창에 이메일 을 치고 검색을 하면
  초대가 되고 상대방이 수락를 하면 끝난다

  실습 2

}